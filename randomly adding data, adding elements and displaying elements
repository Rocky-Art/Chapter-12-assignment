//Add randomly data and store  into dynamic array -

#include<iostream>
#include<string>
#include<ctime>

using namespace std;

int main()
{
    int* nrs = NULL;
    int* underCap = NULL;
    int* aboveCap = NULL;
    int capacity = 0;
    int underCounter = 0;
    int aboveCounter = 0;


    cout << "How many numbers between 0-999 would you like to randomize?: ";
    cin >> capacity;

    nrs = new int[capacity];

    for (int i = 0; i < capacity; i++)
    {
        nrs[i] = rand() % 999 + 1;
        cout << nrs[i] << " ";
        if (nrs[i] < 500)
        {
            underCounter++;

        }
        else
        {
            aboveCounter++;
        }


    }

    underCap = new int[underCounter];
    aboveCap = new int[aboveCounter];

    for (int i = 0; i < underCounter + aboveCounter; i++)
    {

        if (nrs[i] < 500)
        {
            underCap[i] = nrs[i];
        }
        else
            aboveCap[i] = nrs[i];
    }

    cout << "\nThese " << underCounter << " numbers is below 500: ";
    for (int i = 0; i < underCounter; i++)
    {
        cout << underCap[i] << " ";
    }

    cout << "\nThese " << aboveCounter << " numbers is above 500: ";
    for (int i = 0; i < aboveCounter; i++)
    {
        cout << aboveCap[i] << " ";
    }
    cout << endl;

    delete[]nrs;
    delete[]aboveCap;
    delete[]underCap;


    return 0;
}


//Add element in dynamic sorted array -


int insertSorted(int arr[], int n, int key, int capacity)
{
    // Cannot insert more elements if n is already
    if (n >= capacity)
        return n;

    int i;
    for (i = n - 1; (i >= 0 && arr[i] > key); i--)
        arr[i + 1] = arr[i];

    arr[i + 1] = key;

    return (n + 1);
}

// print values from the dynamic array 

void print_array(int *array, int size, const char *sep)
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d%s", array[i], sep);
}

just in case i added the minum value 


int array_min(int *array, int size)
{
    int min = array[0];
    int i;
    for (i = 1; i < size; i++)
        if (min > array[i])
            min = array[i];

    return min;
}
